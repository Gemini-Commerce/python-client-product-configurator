# coding: utf-8

"""
    Product Configurator Service

    ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from product-configurator.models.product_configurator_get_available_configuration2_request import ProductConfiguratorGetAvailableConfiguration2Request

class TestProductConfiguratorGetAvailableConfiguration2Request(unittest.TestCase):
    """ProductConfiguratorGetAvailableConfiguration2Request unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProductConfiguratorGetAvailableConfiguration2Request:
        """Test ProductConfiguratorGetAvailableConfiguration2Request
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProductConfiguratorGetAvailableConfiguration2Request`
        """
        model = ProductConfiguratorGetAvailableConfiguration2Request()
        if include_optional:
            return ProductConfiguratorGetAvailableConfiguration2Request(
                selections = [
                    product-configurator.models.productconfiguratorconfiguration_selection.productconfiguratorconfigurationSelection(
                        step_id = '', 
                        option_ids = [
                            ''
                            ], )
                    ],
                property_filters = [
                    product-configurator.models.configuration_property_filter.configurationPropertyFilter(
                        generic_property = product-configurator.models.configuration_property_filter_generic_property.configurationPropertyFilterGenericProperty(
                            property_key = '', ), 
                        price_property = product-configurator.models.price_property.priceProperty(), 
                        weight_property = product-configurator.models.weight_property.weightProperty(), )
                    ],
                configurator_id = ''
            )
        else:
            return ProductConfiguratorGetAvailableConfiguration2Request(
        )
        """

    def testProductConfiguratorGetAvailableConfiguration2Request(self):
        """Test ProductConfiguratorGetAvailableConfiguration2Request"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
